import sys
import os

sys.path.insert(0, os.getcwd())

import pandas as pd

from modules.dataPreprocessing.outlier_analysis.KNN import KNNAnalysis
from modules.dataPreprocessing.outlier_analysis.AVF import AVFAnalysis
from modules.logging import logger
from modules.config.config import Config
from modules.config.utils.config_enums import OutlierRemovalMethod


class OutlierProcessor:
    def __init__(self, df: pd.DataFrame) -> None:
        self.df = df

    def avf(self, k: int) -> list:
        """
        Generates indices of outliers using frequency of attribute values without modifying `self.df`.

        Parameters
        ----------
        k : int
            Number of outliers to generate.

        Returns
        -------
        list
            Indices of outliers in `self.df`.
        """
        return AVFAnalysis(self.df.copy(deep=True)).getOutliers(k)

    def odin(self, k: int, T: int) -> list:
        """
        Generates indexes of outliers using k-nearest-neighbors without modifying `self.df`.

        Parameters
        ----------
        k : int
            Number of neighbors.

        T : int
            Indegree threshold.

        Returns
        -------
        list
            Indices of outliers in `self.df`.
        """
        return KNNAnalysis(self.df.copy(deep=True)).getOutliers(k, T)

    def removeOutliers(self, outliers: list[int]) -> None:
        """
        Remove outliers based on their index

        Parameters
        ----------
        outliers : list[int]
            Indices of outliers. Can be generated by calling methods `odin` or `avf`.
        """
        current_len = len(self.df)

        # The DataFrame is indexed in this way, as the index used by the `drop`-method can differ from the one used by `iloc`
        self.df.drop(self.df.iloc[outliers].index, inplace=True)

        amount = current_len - len(self.df)
        logger.info(f"Removed {amount} {"outliers" if amount != 1 else "outlier"}")

    def run(self) -> pd.DataFrame:
        """
        Run outlier analysis as specified in the config.

        Returns
        -------
        pd.DataFrame
            A dataframe with potential outliers removed.
        """
        config = Config()
        if config.getValue("UseOutlierRemoval"):

            outlier_method = config.getValue("OutlierRemovalMethod")  # type: str
            outliers = None
            match outlier_method:
                case OutlierRemovalMethod.ODIN.name:
                    outliers = self.odin(**config.getValue("odinParams"))
                case OutlierRemovalMethod.AVF.name:
                    outliers = self.avf(**config.getValue("avfParams"))
                case _:
                    logger.warning(
                        "Undefined outlier removal method selected. Skipping"
                    )
            if outliers:
                logger.info(
                    f"Using outlier detection method: '{outlier_method.lower()}'"
                )
                self.removeOutliers(outliers)
        else:
            logger.info("Skipping outlier analysis")

        return self.df
